{"version":3,"file":"index.cjs.production.min.js","sources":["../src/useFilePicker.ts","../src/validators/useValidators.ts","../src/helpers/openFileDialog.ts","../src/useImperativeFilePicker.ts"],"sourcesContent":["import { useState, useCallback } from 'react';\nimport { fromEvent, FileWithPath } from 'file-selector';\nimport {\n  UseFilePickerConfig,\n  FileContent,\n  FilePickerReturnTypes,\n  UseFilePickerError,\n  ReaderMethod,\n  ExtractContentTypeFromConfig,\n} from './interfaces';\nimport { openFileDialog } from './helpers/openFileDialog';\nimport { useValidators } from './validators/useValidators';\n\nfunction useFilePicker<\n  CustomErrors = unknown,\n  ConfigType extends UseFilePickerConfig<CustomErrors> = UseFilePickerConfig<CustomErrors>\n>(props: ConfigType): FilePickerReturnTypes<ExtractContentTypeFromConfig<ConfigType>, CustomErrors> {\n  const {\n    accept = '*',\n    multiple = true,\n    readAs = 'Text',\n    readFilesContent = true,\n    validators = [],\n    initializeWithCustomParameters,\n    directory = false,\n  } = props;\n\n  const [plainFiles, setPlainFiles] = useState<File[]>([]);\n  const [filesContent, setFilesContent] = useState<FileContent<ExtractContentTypeFromConfig<ConfigType>>[]>([]);\n  const [fileErrors, setFileErrors] = useState<UseFilePickerError<CustomErrors>[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const { onFilesSelected, onFilesSuccessfullySelected, onFilesRejected, onClear } = useValidators<\n    ConfigType,\n    CustomErrors\n  >(props);\n\n  const clear: () => void = useCallback(() => {\n    setPlainFiles([]);\n    setFilesContent([]);\n    setFileErrors([]);\n  }, []);\n\n  const clearWithEventListener: () => void = useCallback(() => {\n    clear();\n    onClear?.();\n  }, [clear, onClear]);\n\n  const parseFile = (file: FileWithPath) =>\n    new Promise<FileContent<ExtractContentTypeFromConfig<ConfigType>>>(\n      async (\n        resolve: (fileContent: FileContent<ExtractContentTypeFromConfig<ConfigType>>) => void,\n        reject: (reason: UseFilePickerError) => void\n      ) => {\n        const reader = new FileReader();\n\n        //availible reader methods: readAsText, readAsBinaryString, readAsArrayBuffer, readAsDataURL\n        const readStrategy = reader[`readAs${readAs}` as ReaderMethod] as typeof reader.readAsText;\n        readStrategy.call(reader, file);\n\n        const addError = ({ ...others }: UseFilePickerError) => {\n          reject({ ...others });\n        };\n\n        reader.onload = async () =>\n          Promise.all(\n            validators.map(validator =>\n              validator.validateAfterParsing(props, file, reader).catch(err => Promise.reject(addError(err)))\n            )\n          )\n            .then(() =>\n              resolve({\n                ...file,\n                content: reader.result as string,\n                name: file.name,\n                lastModified: file.lastModified,\n              } as FileContent<ExtractContentTypeFromConfig<ConfigType>>)\n            )\n            .catch(() => {});\n\n        reader.onerror = () => {\n          addError({ name: 'FileReaderError', readerError: reader.error, causedByFile: file });\n        };\n      }\n    );\n\n  const openFilePicker = (args?: {multiple?: boolean, directory?: boolean}) => {\n    const fileExtensions = accept instanceof Array ? accept.join(',') : accept;\n    openFileDialog(\n      fileExtensions,\n      args?.multiple !== undefined ? args.multiple : multiple,\n      args?.directory !== undefined ? args.directory : directory,\n      async evt => {\n        clear();\n        const inputElement = evt.target as HTMLInputElement;\n        const plainFileObjects = inputElement.files ? Array.from(inputElement.files) : [];\n\n        setLoading(true);\n\n        const validationsBeforeParsing = (\n          await Promise.all(\n            validators.map(validator =>\n              validator\n                .validateBeforeParsing(props, plainFileObjects)\n                .catch((err: UseFilePickerError | UseFilePickerError[]) => (Array.isArray(err) ? err : [err]))\n            )\n          )\n        )\n          .flat(1)\n          .filter(Boolean) as UseFilePickerError<CustomErrors>[];\n\n        setPlainFiles(plainFileObjects);\n        setFileErrors(validationsBeforeParsing);\n        if (validationsBeforeParsing.length) {\n          setLoading(false);\n          setPlainFiles([]);\n          onFilesRejected?.({ errors: validationsBeforeParsing });\n          onFilesSelected?.({ errors: validationsBeforeParsing });\n          return;\n        }\n\n        if (!readFilesContent) {\n          setLoading(false);\n          onFilesSelected?.({ plainFiles: plainFileObjects, filesContent: [] });\n          return;\n        }\n\n        const files = (await fromEvent(evt)) as FileWithPath[];\n\n        const validationsAfterParsing: UseFilePickerError<CustomErrors>[] = [];\n        const filesContent = (await Promise.all(\n          files.map(file =>\n            parseFile(file).catch(\n              (fileError: UseFilePickerError<CustomErrors> | UseFilePickerError<CustomErrors>[]) => {\n                validationsAfterParsing.push(...(Array.isArray(fileError) ? fileError : [fileError]));\n              }\n            )\n          )\n        )) as FileContent<ExtractContentTypeFromConfig<ConfigType>>[];\n        setLoading(false);\n\n        if (validationsAfterParsing.length) {\n          setPlainFiles([]);\n          setFilesContent([]);\n          setFileErrors(errors => [...errors, ...validationsAfterParsing]);\n          onFilesRejected?.({ errors: validationsAfterParsing });\n          onFilesSelected?.({\n            errors: validationsBeforeParsing.concat(validationsAfterParsing),\n          });\n          return;\n        }\n\n        setFilesContent(filesContent);\n        setPlainFiles(plainFileObjects);\n        setFileErrors([]);\n        onFilesSuccessfullySelected?.({ filesContent: filesContent, plainFiles: plainFileObjects });\n        onFilesSelected?.({\n          plainFiles: plainFileObjects,\n          filesContent: filesContent,\n        });\n      },\n      initializeWithCustomParameters\n    );\n  };\n\n  return {\n    openFilePicker,\n    filesContent,\n    errors: fileErrors,\n    loading,\n    plainFiles,\n    clear: clearWithEventListener,\n  };\n}\n\nexport default useFilePicker;\n","import {\n  SelectedFilesOrErrors,\n  ExtractContentTypeFromConfig,\n  UseFilePickerConfig,\n  SelectedFiles,\n  FileErrors,\n} from '../interfaces';\n\nexport const useValidators = <ConfigType extends UseFilePickerConfig<CustomErrors>, CustomErrors>({\n  onFilesSelected: onFilesSelectedProp,\n  onFilesSuccessfullySelected: onFilesSuccessfullySelectedProp,\n  onFilesRejected: onFilesRejectedProp,\n  onClear: onClearProp,\n  validators,\n}: ConfigType) => {\n  // setup validators' event handlers\n  const onFilesSelected = (data: SelectedFilesOrErrors<ExtractContentTypeFromConfig<ConfigType>, CustomErrors>) => {\n    onFilesSelectedProp?.(data as any);\n    validators?.forEach(validator => {\n      validator.onFilesSelected(data as any);\n    });\n  };\n  const onFilesSuccessfullySelected = (data: SelectedFiles<ExtractContentTypeFromConfig<ConfigType>>) => {\n    onFilesSuccessfullySelectedProp?.(data as any);\n    validators?.forEach(validator => {\n      validator.onFilesSuccessfullySelected(data);\n    });\n  };\n  const onFilesRejected = (errors: FileErrors<CustomErrors>) => {\n    onFilesRejectedProp?.(errors);\n    validators?.forEach(validator => {\n      validator.onFilesRejected(errors);\n    });\n  };\n  const onClear = () => {\n    onClearProp?.();\n    validators?.forEach(validator => {\n      validator.onClear?.();\n    });\n  };\n\n  return {\n    onFilesSelected,\n    onFilesSuccessfullySelected,\n    onFilesRejected,\n    onClear,\n  };\n};\n","export function openFileDialog(\n  accept: string,\n  multiple: boolean,\n  directory: boolean,\n  callback: (arg: Event) => void,\n  initializeWithCustomAttributes?: (arg: HTMLInputElement) => void\n): void {\n  // this function must be called from a user\n  // activation event (ie an onclick event)\n\n  // Create an input element\n  var inputElement = document.createElement('input');\n  // Hide element and append to body (required to run on iOS safari)\n  inputElement.style.display = 'none';\n  document.body.appendChild(inputElement);\n  // Set its type to file\n  inputElement.type = 'file';\n  if (directory) {\n    inputElement.webkitdirectory = true;\n  }\n  // Set accept to the file types you want the user to select.\n  // Include both the file extension and the mime type\n  // if accept is \"*\" then dont set the accept attribute\n  if (accept !== '*') inputElement.accept = accept;\n  // Accept multiple files\n  inputElement.multiple = multiple;\n  // set onchange event to call callback when user has selected file\n  //inputElement.addEventListener('change', callback);\n  inputElement.addEventListener('change', arg => {\n    callback(arg);\n    // remove element\n    document.body.removeChild(inputElement);\n  });\n\n  if (initializeWithCustomAttributes) {\n    initializeWithCustomAttributes(inputElement);\n  }\n  // dispatch a click event to open the file dialog\n  inputElement.dispatchEvent(new MouseEvent('click'));\n}\n","import { useCallback, useState } from 'react';\nimport {\n  ExtractContentTypeFromConfig,\n  FileContent,\n  ImperativeFilePickerReturnTypes,\n  SelectedFiles,\n  SelectedFilesOrErrors,\n  useImperativeFilePickerConfig,\n} from './interfaces';\nimport useFilePicker from './useFilePicker';\n\n/**\n * A version of useFilePicker hook that keeps selected files between selections. On top of that it allows to remove files from the selection.\n */\nfunction useImperativeFilePicker<\n  CustomErrors = unknown,\n  ConfigType extends useImperativeFilePickerConfig<CustomErrors> = useImperativeFilePickerConfig<CustomErrors>\n>(props: ConfigType): ImperativeFilePickerReturnTypes<ExtractContentTypeFromConfig<ConfigType>, CustomErrors> {\n  const { onFilesSelected, onFilesSuccessfullySelected, validators, onFileRemoved } = props;\n\n  const [allPlainFiles, setAllPlainFiles] = useState<File[]>([]);\n  const [allFilesContent, setAllFilesContent] = useState<FileContent<ExtractContentTypeFromConfig<ConfigType>>[]>([]);\n\n  const { openFilePicker, loading, errors, clear } = useFilePicker<CustomErrors, ConfigType>({\n    ...props,\n    onFilesSelected: (data: SelectedFilesOrErrors<ExtractContentTypeFromConfig<ConfigType>, CustomErrors>) => {\n      if (!onFilesSelected) return;\n      if (data.errors?.length) {\n        return onFilesSelected(data);\n      }\n      // override the files property to return all files that were selected previously and in the current batch\n      onFilesSelected({\n        errors: undefined,\n        plainFiles: [...allPlainFiles, ...(data.plainFiles || [])],\n        filesContent: [...allFilesContent, ...(data.filesContent || [])] as any,\n      });\n    },\n    onFilesSuccessfullySelected: (data: SelectedFiles<any>) => {\n      setAllPlainFiles(previousPlainFiles => previousPlainFiles.concat(data.plainFiles));\n      setAllFilesContent(previousFilesContent => previousFilesContent.concat(data.filesContent));\n\n      if (!onFilesSuccessfullySelected) return;\n      // override the files property to return all files that were selected previously and in the current batch\n      onFilesSuccessfullySelected({\n        plainFiles: [...allPlainFiles, ...(data.plainFiles || [])],\n        filesContent: [...allFilesContent, ...(data.filesContent || [])],\n      });\n    },\n  });\n\n  const clearAll = useCallback(() => {\n    clear();\n    // clear previous files\n    setAllPlainFiles([]);\n    setAllFilesContent([]);\n  }, [clear]);\n\n  const removeFileByIndex = useCallback(\n    (index: number) => {\n      setAllFilesContent(previousFilesContent => [\n        ...previousFilesContent.slice(0, index),\n        ...previousFilesContent.slice(index + 1),\n      ]);\n      setAllPlainFiles(previousPlainFiles => {\n        const removedFile = previousPlainFiles[index];\n        validators?.forEach(validator => validator.onFileRemoved?.(removedFile, index));\n        onFileRemoved?.(removedFile, index);\n        return [...previousPlainFiles.slice(0, index), ...previousPlainFiles.slice(index + 1)];\n      });\n    },\n    [validators, onFileRemoved]\n  );\n\n  const removeFileByReference = useCallback(\n    (file: File) => {\n      const index = allPlainFiles.findIndex(f => f === file);\n      if (index === -1) return;\n      removeFileByIndex(index);\n    },\n    [removeFileByIndex, allPlainFiles]\n  );\n\n  return {\n    openFilePicker,\n    plainFiles: allPlainFiles,\n    filesContent: allFilesContent,\n    loading,\n    errors,\n    clear: clearAll,\n    removeFileByIndex,\n    removeFileByReference,\n  };\n}\n\nexport default useImperativeFilePicker;\n"],"names":["useFilePicker","props","_props$accept","accept","_props$multiple","multiple","_props$readAs","readAs","_props$readFilesConte","readFilesContent","_props$validators","validators","initializeWithCustomParameters","_props$directory","directory","_useState","useState","plainFiles","setPlainFiles","_useState2","filesContent","setFilesContent","_useState3","fileErrors","setFileErrors","_useState4","loading","setLoading","_useValidators","_ref","onFilesSelectedProp","onFilesSelected","onFilesSuccessfullySelectedProp","onFilesSuccessfullySelected","onFilesRejectedProp","onFilesRejected","onClearProp","onClear","data","forEach","validator","errors","useValidators","clear","useCallback","clearWithEventListener","parseFile","file","Promise","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","resolve","reject","reader","addError","wrap","_context2","prev","next","FileReader","call","_ref2","others","_extends","_objectDestructuringEmpty","onload","_callee","_context","abrupt","all","map","validateAfterParsing","err","then","content","result","name","lastModified","stop","onerror","readerError","error","causedByFile","_x","_x2","apply","this","arguments","openFilePicker","args","callback","initializeWithCustomAttributes","inputElement","document","createElement","style","display","body","appendChild","type","webkitdirectory","addEventListener","arg","removeChild","dispatchEvent","MouseEvent","openFileDialog","Array","join","undefined","_ref4","_callee3","evt","plainFileObjects","validationsBeforeParsing","files","validationsAfterParsing","_context3","target","from","validateBeforeParsing","isArray","sent","flat","filter","Boolean","length","fromEvent","fileError","push","concat","_x3","onFileRemoved","allPlainFiles","setAllPlainFiles","allFilesContent","setAllFilesContent","_useFilePicker","_data$errors","previousPlainFiles","previousFilesContent","clearAll","removeFileByIndex","index","slice","removedFile","removeFileByReference","findIndex","f"],"mappings":"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"}